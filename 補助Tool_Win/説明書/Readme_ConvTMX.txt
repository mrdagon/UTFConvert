■ConvTMX 0.01～説明書■
　Tiledで作成したtmxファイルをソースコードに変換するソフトです。
UIのレイアウト作成を効率化したい場合等に利用出来ます。
SDX以外でも使え無いこともないと思います。

　起動にはSDL関連のDLLが必要です。

■tmxファイルの編集■
tmxファイルを作成するために、tildを入手して下さい。
http://www.mapeditor.org/

　一からtmxファイルの仕様を説明するのは難しいので、サンプルを確認しながらReadmeを読んで下さい。
DXFramework/Sample/template.tmxを開いて下さい。

【1.サンプルプロジェクトの解説】
　ConvTMXで生成出来るコードは『Object』『Scene』『Enum』の3つです。
それぞれ～Template.hとtmxファイルの情報を元に生成されます。

　TEMPLATEレイヤーに置いた四角形オブジェクトからObjectのコードが生成され、
それ以外のオブジェクト・レイヤーからSceneのコードが生成されます。
　タイルセットの情報からResourceIDの列挙型、TEMPLATEレイヤー以外に配置したオブジェクトから
ObjectIDの列挙型のコードが生成されEnumのコードになります。

【2.TEMPLATEレイヤー】
　四角形のオブジェクトを配置し、設定を入力する事でObjectClassの定義が出来ます。
デフォルトパラメータは名前以外無視されます。名前には型名を入れて下さい。
　カスタムプロパティでは、その型のメンバー変数と、コードを設定出来ます。

[2.1.メンバー変数プロパティ]
　プロパティ名に変数名、値に型名を入力します。
　型はintかdoubleの引数一つで初期化出来るものに限られます。
std::stringにした場合のみ文字列で初期化出来ます。

[2.2.コードプロパティ]
　プロパティ名の初めが~になっている場合コード扱いになります。
プロパティ名にコード名、値にコードを入力します。
　コードにメンバー変数を使う場合は@を付けて下さい。

【3.Sceneレイヤー】
　TEMPLATE以外のオブジェクトレイヤーからSceneのコードが生成されます。
四角形とタイルは以下の様に設定します。
------------
ID         | ObjectIDのコードの元になります、変更不可。
名前       | オブジェクトの名前を入れます。他のオブジェクトと被ると後でコードの修正が必要になります。
種類       | TEMPLATEレイヤーで設定したクラス名を入力します。省略した場合Image扱いになります。
表示       | チェックを外すとそのオブジェクトは無視されます。
場所/大きさ| Objectのrectの値になります。タイルの場合、大きさは無視されます。
回転       | 現在未実装です、0.00のままにして下さい。
反転       | タイルのみのパラメータ、無視されます。
------------
　カスタムプロパティには、種類に設定した物と同じメンバー変数プロパティを追加し、値に数値や文字列を入れます。
コードプロパティはあっても無くてもかまいません。

　プロパティ名等を正しく追加しなおすのは手間なので、基本的にはテンプレートレイヤーにある四角形をコピーして、編集すると楽だと思います。

【4.タイルセット】
　タイルセットに追加されている画像名からEnumのResourceIDが生成されます。
タイルセットに使う画像ファイルは相対パスで扱うので、tmxファイルと画像ファイルの位置関係は作成するソフトと画像ファイルの位置関係と同じにして下さい。
　タイルセットは複数作っても、一つまとめても問題ありません。
タイルセット名も生成するコードには影響が無いので自由に決めてください。

タイルセットの描画オフセットは無視されます。またカスタムプロパティは設定しないで下さい。

タイルセットはエクスポートしないで下さい。

【5.その他】
　説明していない項目(タイルレイヤー、画像レイヤー、ポリゴン、ポリライン)を追加した場合の動作は保障していません。
また設定の書式を間違えた場合、どういった誤作動をするかも分かりません。注意して使って下さい。


■ConvTiledの使い方■
【1.準備】
作成したtmxファイルと同じ階層にtiledフォルダをコピーします。

【2.設定の変更】
基本的には初期設定で大丈夫です。

tiledフォルダ内のconfig.txtファイルを編集する事でどのソースコードをテンプレに使うか等を設定出来ます。
また生成されるクラス名に付けるプレフィックスと名前空間名も変更する事が出来ます。
tmxfile名はTiledConvにtmxファイルをドロップした時に更新されます。

【3.コードの生成】
TiledConvにtmxファイルをドロップして下さい。
tmxファイルがあるフォルダにソースコードが生成されます。

■コードを実行する■

以下のようなコードを書けば、コードを実行出来ます。
『TMX_FILE_NAME』の定義、シーンのインクルード、画像の読み込みコードが必要です。

　サンプルの場合、実行中にTiledでオブジェクトの位置を調整した後、保存した後、
作成したソフトをアクティブにしてEnterを押すと、オブジェクトの位置が更新されます。

～～～～～～～～～～～～～～～～～～～～～～～～～～～
#include <SDXFramework.h>
#include <Multimedia/SDXafx.h>
#include <Tiled/TmxToGUI.h>

SDX::ImagePack imageS;
SDX::IFrame* frameS[10];
SDX::IFont* fontS[10];

#include "TestScene.h"
#define TMX_FILE_NAME = "template.tmx";

int main(int argc, char* argv[])
{
	using namespace SDX;
	//事前にtemplate.tmxをコードに変換し
	//TestScene等のコードを作成しておく事
	System::Initialise("test", 640, 480);

	imageS.LoadTmx(TMX_FILE_NAME);
	fontS[0] = new Font(SystemFont::Gothic, 10);
	auto frame0 = ImagePack("data/pipo-WindowBase001.png", 9, 3, 3);
	auto frame1 = ImagePack("data/pipo-WindowBase004.png", 9, 3, 3);
	frameS[0] = new BmpFrame(&frame0);
	frameS[1] = new BmpFrame(&frame1);

	TestScene scene;

	while (System::Update())
	{
		scene.Draw();
	}

	return 0;
}
～～～～～～～～～～～～～～～～～～～～～～～～～～～

■テンプレの編集■
コードの生成はテンプレートファイルを一行ずつコピー
//@コメント
//@End
で囲まれた箇所にはコードが追加されると言った感じにコードが生成されます。
　著作権表記や名前空間名を変えたい、共通の処理を変更したい/追加したい場合等は各ファイルを修正して下さい。

[ClassTemplate.h]
ObjectClassの元になるコードです。CLASSNAMEの所はクラス名に置き換わります。
Scene側で処理を全て行なう場合は、Draw等は削除しても大丈夫です。

[SceneTemplate.h/SceneTemplate2.h]
SceneClassの元になるコードです。
TMX_FILE_NAME には tmxファイル名を定義して下さい。

Sceneは大きく二種類の設計方針があるのでテンプレートも二種類配布しています。

SceneTemplateの方はScene側で処理を行なうパターン。
SceneTemplate2の方はObject側で処理を行なうパターンになっています。

■コードの更新■
　各ObjectやSceneのコードが既に存在している場合、各テンプレファイルの代わりにそれらのコードを元にしてコードが生成されます。一から生成しなおしたい場合は、そのコードを削除して下さい。
　@コメントを外したり、そのままにすることで部分的に更新すると言った事も可能です。

■ObjectClassのメンバー変数■
ObjectClassの共通メンバー変数について

[Rect rect]
基底クラスIGUIのメンバー変数。
大きさと場所を表す。
タイルの場合、大きさはタイルの幅と高さに後述のzoomW,zoomHを掛けた値になる。

[int id]
基底クラスIGUIのメンバー変数。
idはIDプロパティの値でEnumのObjectIDに対応する。

[double angle]
基底クラスIGUIのメンバー変数。
回転プロパティの値。

タイルの場合さらに3つのプロパティを持つ。
[int gID]
画像のID、EnumのResourceIDに対応する。

[double zoomW]
[double zoomH]
タイルの幅と高さ、設定した値が0の場合は1になる。

■ソースのライセンス■
conv_tmx.cpp
及びSDXFrameworkのGetTag.h、TmxToCode.hを修正すれば改造出来ると思います。

Copyright © 2014 SDXFramework
【License】GNU Affero General Public License, version 3
【Contact】http://sourceforge.jp/projects/dxframework/

コードのコンパイルにはSDXFramework ver0.13が必要です。

■トラブルシューティング■
１.タイルクラスにされる/されない
　あるクラスのオブジェクトに"gid"パラメータを持つオブジェクトが一つでもあればそのクラスはタイルクラス扱いになります。

　TEMPLATEにタイル用にクラスを定義したけど、一つもオブジェクトが無いような場合や、矩形用のオブジェクトのカスタムプロパティに"gid"を設定した場合はエラーになったりコンパイル不能なコードになる事があります。TEMPLATEレイヤー上の不要なオブジェクトは削除して下さい。

２.更新が上手くいかない
　既にクラスやシーンのコードが存在する場合、そのファイルをテンプレート扱いにしてコードを生成するので一旦削除して下さい。

３.再定義
　同じシーン上に同じ名前のオブジェクトがあるとエラーになります。

４.対応する{が無い
　パラメータを変更せずintのままにしたりするとそういうエラーが出ます。

５.入力忘れ
　種類が空いているオブジェクトは"Image"扱いになります、それ以外の項目が空いていると"0"扱いになります

６.想定してない事
　例えば円や直線オブジェクトを追加する等するとバグる可能性が高いです。

７.矩形の型が分かりにくい
　Tiledの編集>設定>オブジェクト・タイプで、種類毎に表示色を設定出来ます。